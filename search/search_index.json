{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#a-sparql-rewriter-that-performs-enhanced-searches","title":"A SPARQL rewriter that performs enhanced searches","text":"<p>The package provides a SPARQL rewriting framework which can be used to implement different enhanced search facilities like full-text searches or embeddings based searches. The re-writing can be used as a \"front-end\" to existing SPARQL endpoints, or integrated as a software library. One of the benefits are enabling easier searches for existing triplestores in which it might be cumbersome to install or configure enhanced search facilities.</p> <p>\u2728 This library gives you \"fizzy\" searches! \u2728</p> <p>(and it was made by the FIZ ISE group)</p>"},{"location":"start/","title":"Getting Started","text":""},{"location":"start/#installation","title":"Installation","text":"<p>Create a Python virtual environment, and then issue the command:</p> <pre><code>pip install fizzysearch\n</code></pre>"},{"location":"start/#running-the-tests","title":"Running the tests","text":"<p>See the test file for some examples on how to build an index and run some test queries.</p>"},{"location":"start/#examples","title":"Examples","text":"<p>Let's say you have a n-triples files in the current directory name <code>foobar.nt</code>. To create a fulltext index of all the literals in this file, you can issue the command in the shell:</p> <pre><code>FTS_SQLITE_PATH=example.db python -m fizzysearch\n</code></pre> <p>If all goes well, this should read your file named foobar.nt, index it, and store the results in a SQLite file named <code>example.db</code></p> <p>Note</p> <p>Running on the command line will 'walk' the entire current directory, and all sub-directories if you do not explicitly specify a path. So if you have many .nt files in the current directory, it will try to index them all!</p> <p>Now that you have a fulltext index for your n-triple file, you could use it in a system like SHMARQL to query the file easily.</p>"}]}